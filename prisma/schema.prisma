// Propellic Pulse - Employee Net Promoter Score Survey Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cycle {
  id        String    @id @default(cuid())
  year      Int
  month     Int          // 1..12
  startsAt  DateTime
  endsAt    DateTime
  isActive  Boolean   @default(true)
  questions Question[]
  responses Response[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@unique([year, month])
}

model Question {
  id        String   @id @default(cuid())
  cycleId   String
  cycle     Cycle    @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  order     Int      // 1..3
  text      String
  createdAt DateTime @default(now())
  @@unique([cycleId, order])
}

model Department {
  id        String     @id @default(cuid())
  name      String     @unique
  responses Response[]
  createdAt DateTime   @default(now())
}

model Response {
  id             String      @id @default(cuid())
  cycleId        String
  cycle          Cycle       @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  enpsScore      Int         // 0..10
  q1             String?
  q2             String?
  q3             String?
  name           String?
  departmentId   String?
  department     Department? @relation(fields: [departmentId], references: [id])
  submissionHash String?     @unique
  createdAt      DateTime    @default(now())
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations in model Account below
// Further reading:
// https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
